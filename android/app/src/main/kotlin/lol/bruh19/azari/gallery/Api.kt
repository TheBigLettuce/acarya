// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package lol.bruh19.azari.gallery

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */

/** Generated class from Pigeon that represents data sent in messages. */
data class Result (
  val ok: Boolean? = null,
  val message: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromMap(map: Map<String, Any?>): Result {
      val ok = map["ok"] as? Boolean
      val message = map["message"] as? String

      return Result(ok, message)
    }
  }
  fun toMap(): Map<String, Any?> {
    val map = mutableMapOf<String, Any?>()
    ok?.let { map["ok"] = it }
    message?.let { map["message"] = it }
    return map
  }
}
@Suppress("UNCHECKED_CAST")
private object GalleryApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? Map<String, Any?>)?.let {
          Result.fromMap(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Result -> {
        stream.write(128)
        writeValue(stream, value.toMap())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class GalleryApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by GalleryApi. */
    val codec: MessageCodec<Any?> by lazy {
      GalleryApiCodec
    }
  }
  fun add(bucketIdArg: String, albumNameArg: String, pathArg: String, thumbArg: List<Long>, callback: (Result) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.GalleryApi.add", codec)
    channel.send(listOf(bucketIdArg, albumNameArg, pathArg, thumbArg)) {
      val result = it as Result
      callback(result)
    }
  }
}

private fun wrapResult(result: Any?): Map<String, Any?> {
  return hashMapOf("result" to result)
}

private fun wrapError(exception: Throwable): Map<String, Any> {
  return hashMapOf<String, Any>(
    "error" to hashMapOf<String, Any>(
      "code" to exception.javaClass.simpleName,
      "message" to exception.toString(),
      "details" to "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  )
}
