// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class Result {
  Result({
    this.ok,
    this.message,
  });

  bool? ok;
  String? message;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['ok'] = ok;
    pigeonMap['message'] = message;
    return pigeonMap;
  }

  static Result decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Result(
      ok: pigeonMap['ok'] as bool?,
      message: pigeonMap['message'] as String?,
    );
  }
}

class _GalleryApiCodec extends StandardMessageCodec{
  const _GalleryApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Result) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return Result.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class GalleryApi {
  static const MessageCodec<Object?> codec = _GalleryApiCodec();

  Result add(String bucketId, String albumName, String path, List<int?> thumb);
  static void setup(GalleryApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.GalleryApi.add', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.GalleryApi.add was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_bucketId = (args[0] as String?);
          assert(arg_bucketId != null, 'Argument for dev.flutter.pigeon.GalleryApi.add was null, expected non-null String.');
          final String? arg_albumName = (args[1] as String?);
          assert(arg_albumName != null, 'Argument for dev.flutter.pigeon.GalleryApi.add was null, expected non-null String.');
          final String? arg_path = (args[2] as String?);
          assert(arg_path != null, 'Argument for dev.flutter.pigeon.GalleryApi.add was null, expected non-null String.');
          final List<int?>? arg_thumb = (args[3] as List<Object?>?)?.cast<int?>();
          assert(arg_thumb != null, 'Argument for dev.flutter.pigeon.GalleryApi.add was null, expected non-null List<int?>.');
          final Result output = api.add(arg_bucketId!, arg_albumName!, arg_path!, arg_thumb!);
          return output;
        });
      }
    }
  }
}
